diff --git a/src/event/ngx_event_pipe.c b/src/event/ngx_event_pipe.c
index d01b204..02325b2 100644
--- a/src/event/ngx_event_pipe.c
+++ b/src/event/ngx_event_pipe.c
@@ -10,7 +10,12 @@
 #include <ngx_event_pipe.h>
 
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+static ngx_int_t ngx_event_pipe_read_upstream(ngx_event_pipe_t *p, 
+                                              ngx_int_t do_flush);
+#else
 static ngx_int_t ngx_event_pipe_read_upstream(ngx_event_pipe_t *p);
+#endif
 static ngx_int_t ngx_event_pipe_write_to_downstream(ngx_event_pipe_t *p);
 
 static ngx_int_t ngx_event_pipe_write_chain_to_temp_file(ngx_event_pipe_t *p);
@@ -47,7 +52,11 @@ ngx_event_pipe(ngx_event_pipe_t *p, ngx_int_t do_write)
 
         p->log->action = "reading upstream";
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+        if (ngx_event_pipe_read_upstream(p, 0) == NGX_ABORT) {
+#else
         if (ngx_event_pipe_read_upstream(p) == NGX_ABORT) {
+#endif
             return NGX_ABORT;
         }
 
@@ -95,8 +104,33 @@ ngx_event_pipe(ngx_event_pipe_t *p, ngx_int_t do_write)
 }
 
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+ngx_int_t
+ngx_event_pipe_flush(ngx_event_pipe_t *p)
+{
+    p->log->action = "reading upstream";
+
+    if (ngx_event_pipe_read_upstream(p, 1) == NGX_ABORT) {
+        return NGX_ABORT;
+    }
+
+    p->log->action = "sending to client";
+
+    if (ngx_event_pipe_write_to_downstream(p) == NGX_ABORT) {
+        return NGX_ABORT;
+    }
+
+    return NGX_OK;
+}
+#endif
+
+
 static ngx_int_t
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+ngx_event_pipe_read_upstream(ngx_event_pipe_t *p, ngx_int_t do_flush)
+#else
 ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
+#endif
 {
     ssize_t       n, size;
     ngx_int_t     rc;
@@ -104,6 +138,11 @@ ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
     ngx_chain_t  *chain, *cl, *ln;
 
     if (p->upstream_eof || p->upstream_error || p->upstream_done) {
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+        if (do_flush) {
+            goto flush;
+        }
+#endif
         return NGX_OK;
     }
 
@@ -313,6 +352,9 @@ ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
             if (n >= size) {
                 cl->buf->last = cl->buf->end;
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+                n -= size;
+#else
                 /* STUB */ cl->buf->num = p->num++;
 
                 if (p->input_filter(p, cl->buf) == NGX_ERROR) {
@@ -323,11 +365,29 @@ ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
                 ln = cl;
                 cl = cl->next;
                 ngx_free_chain(p->pool, ln);
+#endif
 
             } else {
                 cl->buf->last += n;
                 n = 0;
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+                if (cl->buf->last - cl->buf->pos < p->length) {
+                    continue;
+                }
+#endif
             }
+
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+            /* STUB */ cl->buf->num = p->num++;
+
+            if (p->input_filter(p, cl->buf) == NGX_ERROR) {
+                return NGX_ABORT;
+            }
+
+            ln = cl;
+            cl = cl->next;
+            ngx_free_chain(p->pool, ln);
+#endif
         }
 
         if (cl) {
@@ -337,6 +397,9 @@ ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
             p->free_raw_bufs = cl;
         }
     }
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+flush:
+#endif
 
 #if (NGX_DEBUG)
 
@@ -392,6 +455,11 @@ ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
                        cl->buf->file_last - cl->buf->file_pos);
     }
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0,
+                   "pipe length: %O", p->length);
+#endif
+
 #endif
 
     if ((p->upstream_eof || p->upstream_error) && p->free_raw_bufs) {
@@ -848,6 +916,18 @@ ngx_event_pipe_copy_input_filter(ngx_event_pipe_t *p, ngx_buf_t *buf)
     }
     p->last_in = &cl->next;
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    if (p->length == NGX_MAX_OFF_T_VALUE) {
+        return NGX_OK;
+    }
+
+    p->length -= b->last - b->pos;
+
+    if (p->length <= 0) {
+        p->upstream_done = 1;
+    }
+#endif
+
     return NGX_OK;
 }
 
diff --git a/src/event/ngx_event_pipe.h b/src/event/ngx_event_pipe.h
index 00b8acf..7fd921e 100644
--- a/src/event/ngx_event_pipe.h
+++ b/src/event/ngx_event_pipe.h
@@ -65,6 +65,9 @@ struct ngx_event_pipe_s {
     ssize_t            busy_size;
 
     off_t              read_length;
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    off_t              length;
+#endif
 
     off_t              max_temp_file_size;
     ssize_t            temp_file_write_size;
@@ -87,6 +90,9 @@ struct ngx_event_pipe_s {
 
 
 ngx_int_t ngx_event_pipe(ngx_event_pipe_t *p, ngx_int_t do_write);
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+ngx_int_t ngx_event_pipe_flush(ngx_event_pipe_t *p);
+#endif
 ngx_int_t ngx_event_pipe_copy_input_filter(ngx_event_pipe_t *p, ngx_buf_t *buf);
 ngx_int_t ngx_event_pipe_add_free_buf(ngx_event_pipe_t *p, ngx_buf_t *b);
 
diff --git a/src/http/modules/ngx_http_proxy_module.c b/src/http/modules/ngx_http_proxy_module.c
index 214fe6a..00c1a0c 100644
--- a/src/http/modules/ngx_http_proxy_module.c
+++ b/src/http/modules/ngx_http_proxy_module.c
@@ -611,6 +611,9 @@ ngx_http_proxy_handler(ngx_http_request_t *r)
     }
 
     u->pipe->input_filter = ngx_event_pipe_copy_input_filter;
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    u->keepalive = 1;
+#endif
 
     u->accel = 1;
 
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index ad5b449..77f0806 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -2208,6 +2208,17 @@ ngx_http_upstream_send_response(ngx_http_request_t *r, ngx_http_upstream_t *u)
     p->pool = r->pool;
     p->log = c->log;
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    if (r->headers_out.content_length_n != -1) {
+
+        p->length = r->headers_out.content_length_n;
+
+    } else {
+        p->length = NGX_MAX_OFF_T_VALUE;
+    }
+
+#endif
+
     p->cacheable = u->cacheable || u->store;
 
     p->temp_file = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
@@ -2598,6 +2609,17 @@ ngx_http_upstream_process_upstream(ngx_http_request_t *r,
         u->pipe->upstream_error = 1;
         ngx_connection_error(c, NGX_ETIMEDOUT, "upstream timed out");
 
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+        if (ngx_event_pipe_flush(u->pipe) == NGX_ABORT) {
+
+            if (r->connection->destroyed) {
+                return;
+            }
+
+            ngx_http_upstream_finalize_request(r, u, 0);
+            return;
+        }
+#endif
     } else {
         if (ngx_event_pipe(u->pipe, 0) == NGX_ABORT) {
             ngx_http_upstream_finalize_request(r, u, 0);
diff --git a/src/http/ngx_http_upstream.h b/src/http/ngx_http_upstream.h
index 01e2e1e..21ecc52 100644
--- a/src/http/ngx_http_upstream.h
+++ b/src/http/ngx_http_upstream.h
@@ -310,6 +310,9 @@ struct ngx_http_upstream_s {
 
     unsigned                         request_sent:1;
     unsigned                         header_sent:1;
+#if (NGX_ENABLE_UPSTREAM_KEEPALIVE)
+    unsigned                         keepalive:1;
+#endif
 };
 
 
